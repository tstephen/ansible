---
- hosts: servers
  vars:
    ubuntu_common_deploy_public_keys:
      - ~/.ssh/id_rsa.pub

    ubuntu_common_required_packages:
      - fail2ban

    ubuntu_common_optional_packages:
      - mosh
      - vim

  tasks:
    - name: Test if non-root user exists
      local_action: "command ssh -q -o BatchMode=yes -o ConnectTimeout=3 {{ inventory_hostname }} 'echo ok'"
      register: test_user
      ignore_errors: true
      changed_when: false

    - name: Install non-root user for administration
      remote_user: root
      become: yes
      user: name={{ ubuntu_common_deploy_user_name }} groups=admin,www-data shell=/bin/bash
      when: test_user|failure

    - name: Check if keys exist
      stat:
        path: '~/.ssh/id_rsa'
      register: idrsa

    - name: Generate keys to connect to other machines
      shell: ssh-keygen -t rsa -f ~/.ssh/id_rsa -P ''
      when: idrsa.stat.exists is undefined or idrsa.stat.exists == False

    - name: Add authorized keys for deploy user
      authorized_key: user={{ ubuntu_common_deploy_user_name }}
                      key="{{ lookup('file', item) }}"
      with_items: "{{ubuntu_common_deploy_public_keys}}"

    - name: Allow no password use of sudo
      become: yes
      lineinfile: "dest=/etc/sudoers
                   state=present
                   line='%admin ALL=(ALL) NOPASSWD: ALL'
                   validate='visudo -cf %s'"

    - name: Install non-root devops users
      remote_user: "{{ ubuntu_common_deploy_user_name }}"
      become: yes
      user: name={{ item }} groups=admin,www-data shell=/bin/bash
      with_items: "{{ os_users }}"

    - name: Disable password login
      become: yes
      lineinfile: dest={{ sshd_config }} regexp="^#?PasswordAuthentication" line="PasswordAuthentication yes"
      when: sshd_pwd_auth is not defined or sshd_pwd_auth != True
      notify: Restart sshd

    - name: Enable password login
      become: yes
      lineinfile: dest={{ ssh_config }} regexp="^#?PasswordAuthentication" line="PasswordAuthentication yes"
      when: ssh_pwd_auth is defined and ssd_pwd_auth == True
      notify: Restart sshd

    - name: Update APT package cache
      become: yes
      apt: update_cache=yes cache_valid_time=3600

    - name: Install required packages
      become: yes
      apt: state=installed pkg={{ item }}
      with_items: "{{ubuntu_common_required_packages}}"

    - name: Install optional packages
      become: yes
      apt: state=installed pkg={{ item }}
      with_items: "{{ubuntu_common_optional_packages}}"

    - name: Adjust APT update intervals
      become: yes
      copy: src=src/apt_periodic dest=/etc/apt/apt.conf.d/10periodic

    - name: Set up Postfix to relay mail
      become: yes
      debconf: name=postfix
               question='{{ item.question }}'
               value='{{ item.value }}'
               vtype='{{ item.vtype }}'
      with_items:
        - { question: 'postfix/mailname', value: '{{ ansible_fqdn }}', vtype: 'string' }
        - { question: 'postfix/main_mailer_type', value: 'Internet Site', vtype: 'string' }

    - name: Check if swap exists
      stat:
        path: '/mnt/1GB.swap'
      register: swap

    - name: create the file to be used for swap
      become: yes
      command: fallocate -l 1G /mnt/1GB.swap
      when: swap.stat.exists is undefined or swap.stat.exists == False

    - name: format the file for swap
      become: yes
      command: mkswap /mnt/1GB.swap
      when: swap.stat.exists is undefined or swap.stat.exists == False

    - name: change swap file permissions
      become: yes
      file: path=/mnt/1GB.swap owner=root group=root mode=0600
      when: swap.stat.exists is undefined or swap.stat.exists == False

    - name: add the file to the system as a swap file
      become: yes
      command: swapon /mnt/1GB.swap
      when: swap.stat.exists is undefined or swap.stat.exists == False

    - name: write swap entry in fstab
      become: yes
      mount: name=none src=/mnt/1GB.swap fstype=swap opts=sw passno=0 dump=0 state=present
      when: swap.stat.exists is undefined or swap.stat.exists == False

    - name: Email log summary daily
      become: yes
      lineinfile: dest=/etc/cron.daily/00logwatch
                  regexp="^/usr/sbin/logwatch"
                  line="/usr/sbin/logwatch --output mail --mailto {{ ubuntu_common_logwatch_email }} --detail high"
                  state=present create=yes

    - name: Disallow root SSH access
      become: yes
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PermitRootLogin"
                  line="PermitRootLogin no"
                  state=present
      notify: Restart sshd

  handlers:

    - name: Restart sshd
      service: name=ssh state=restarted

    #- name: TODO Set locale (edit /etc/default/locale)
