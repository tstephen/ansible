---
- hosts: wordpress-sites
  become: yes
  vars:
    reqd_packages:
      - apache2
      - git
      - libapache2-mod-php5
      - php5
      - php5-curl
      - php5-mcrypt
      - php5-mysql
      - python-pip
      - unzip
    wp_dirs:
      - /wp-content
      - /wp-content/uploads
      - /wp-content/upgrades
    wp_plugins:
      - broken-link-checker.1.11.2.zip
      - gitium.zip
      - wordfence.6.3.9.zip
      - wordpress-importer.0.6.3.zip
    wp_unreqd:
      - plugins/akismet
      - plugins/hello.php # dolly plugin
      - themes/twentyfifteen
      - themes/twentysixteen
      - themes/twentyseventeen
#  roles:
#    - { role: geerlingguy.mysql }


  tasks:

    - name: Ensure pre-reqs for WordPress
      become: yes
      apt: state=installed pkg={{ item }}
      with_items: "{{ reqd_packages }}"

    - name: Install the Python MySQL module
      pip:
        name: MySQL-python

    - name: Install CertBot for certificate install and renewal
      become: yes
      get_url:
        url: https://dl.eff.org/certbot-auto
        dest: /usr/bin
        mode: a+x

    #- name: Run CertBot on apache (needs to be manual for now)
    #  shell: certbot-auto --apache

    # Create job like 34 4 * * * certbot-auto renew --quiet --no-self-upgrade
    - name: crontab to autorenew certs
      cron:
        name: "Renew letsencrypt certificates regularly"
        minute: "34"
        hour: "4"
        job: "certbot-auto renew --quiet --no-self-upgrade"

    - name: Ensure WP database exists
      become: yes
      mysql_db:
        login_user: '{{ mysql_root_username }}'
        login_password: '{{ mysql_root_password }}'
        name: '{{ wp_db_name }}'
        state: present

    - name: Ensure WP db user exists
      mysql_user:
        login_user: '{{ mysql_root_username }}'
        login_password: '{{ mysql_root_password }}'
        name: '{{ wp_db_user }}'
        password: '{{ wp_db_pass }}'
        priv: '{{ wp_db_name }}.*:ALL'
        state: present

    - name: Create WP docs dir
      become: yes
      file:
        path: '{{ wp_dir }}'
        state: directory
        owner: www-data
        group: www-data
        mode: 0775

    - name: Provision WP site
      become: yes
      template:
        src: src/templates/site-conf.j2
        dest: '/etc/apache2/sites-available/{{ tenant_id }}.conf'
        owner: root
        group: root
        mode: 0644
      register: apache_config

    - name: Enable WP site
      become: yes
      file:
        src: '/etc/apache2/sites-available/{{ tenant_id }}.conf'
        dest: '/etc/apache2/sites-enabled/{{ tenant_id }}.conf'
        state: link

    - name: Reload Apache config
      become: yes
      service:
        name: apache2
        state: reloaded
      when: apache_config.changed

    - name: Check WP install
      stat:
        path: '{{ wp_dir }}/wp-includes'
      register: wp

    - name: Unarchive WP files
      become: yes
      become_user: www-data
      unarchive:
        src: https://wordpress.org/latest.zip
        dest: '{{ wp_dir }}'
        remote_src: True
        owner: www-data
        group: www-data
        #mode: 0664
      when: wp.stat.isdir is undefined

    - name: Create WP DB script
      template:
        src: src/templates/wordpress-sql.j2
        dest: '/var/tmp/wordpress-{{ tenant_id }}.sql'
        mode: 0644

    - name: Create WP scripts dir
      become: yes
      file:
        path: '/opt/wordpress/bin'
        state: directory
        owner: www-data
        group: www-data
        mode: 0770

    - name: Create remote WP DB backup script
      template:
        src: src/templates/wp-db-remote-backup.sh.j2
        dest: '/opt/wordpress/bin/{{ tenant_id }}-wp-db-remote-backup.sh'
        owner: "{{ ansible_ssh_user }}"
        group: www-data
        mode: 0755

    # Creates an job like "0 5 * * * /home/tstephen/foo-wp-db-remote-backup.sh"
    - name: Ensure cron job for db backup exists
      cron:
        name: "remote backup {{ tenant_id }}_wp_db"
        minute: "0"
        hour: "5"
        job: '/opt/wordpress/bin/{{ tenant_id }}-wp-db-remote-backup.sh'
        user: "{{ ansible_ssh_user }}"

    - name: Create WP DB backup script
      template:
        src: src/templates/wp-db-backup.sh.j2
        dest: '/opt/wordpress/bin/{{ tenant_id }}-wp-db-backup.sh'
        owner: "{{ ansible_ssh_user }}"
        group: www-data
        mode: 0755

    # Creates an job like "0 19 * * * /home/tstephen/foo-wp-db-backup.sh"
    - name: Ensure cron job for db backup exists
      cron:
        name: "backup {{ tenant_id }}_wp_db"
        minute: "0"
        hour: "19"
        job: '/opt/wordpress/bin/{{ tenant_id }}-wp-db-backup.sh'
        user: "{{ ansible_ssh_user }}"

    - name: Create remote WP DB restore script
      template:
        src: src/templates/wp-db-remote-restore.sh.j2
        dest: '/opt/wordpress/bin/{{ tenant_id }}-wp-db-remote-restore.sh'
        owner: "{{ ansible_ssh_user }}"
        group: www-data
        mode: 0755

    - name: Create WP move script
      become: yes
      template:
        src: src/templates/wp-post-install-sh.j2
        dest: '/var/tmp/wp-post-install-{{ tenant_id }}.sh'
        owner: www-data
        group: www-data
        mode: 0744
      when: wp.stat.isdir is undefined

    - name: WP post install (db & files)
      become: yes
      become_user: www-data
# Cannot seem to get the shell or command modules to do this.
#      shell: mv '{{ wp_dir }}/wordpress/' '{{ wp_dir }}/'
      shell: /var/tmp/wp-post-install-{{ tenant_id }}.sh
      when: wp.stat.isdir is undefined

    - name: Create WP dirs if not existing and set permissions
      file:
        path: '{{ wp_dir }}{{ item }}'
        state: directory
        owner: www-data
        group: www-data
        mode: 0775
      with_items: "{{ wp_dirs }}"

    - name: Check if WP .htaccess exists
      stat:
        path: '{{ wp_dir }}/.htaccess'
      register: wphtaccess

    - name: Setup .htaccess file if missing
      become: yes
      template:
        src: src/templates/wp.htaccess.j2
        dest: '{{ wp_dir }}/.htaccess'
        owner: www-data
        group: www-data
        mode: 0660
      when: wphtaccess.stat.exists is undefined or wphtaccess.stat.exists == False

    - name: Block XML-RPC in pre-existing htaccess
      blockinfile:
        path: '{{ wp_dir }}/.htaccess'
        marker: "# ANSIBLE Block XML-RPC requests"
        content: |
          # This is a common attack vector but does disable mobile apps
          <Files xmlrpc.php>
            order deny,allow
            deny from all
            allow from 123.123.123.123
          </Files>
      when: wphtaccess.stat.exists == True

    - name: Allow Omny cross site access in pre-existing htaccess
      blockinfile:
        path: '{{ wp_dir }}/.htaccess'
        marker: "# ANSIBLE configure Omny"
        content: |
          <IfModule mod_headers.c>
            Header set Access-Control-Allow-Origin "https://api.omny.link"
            #Header set Access-Control-Allow-Origin "*"
            Header set Access-Control-Allow-Headers "Accept, Accept-Charset, Accept-Encoding, Accept-Language, Access-Control-Allow-Credentials, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers, Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Age, Allow, Authentication-Info, Authorization, Cache-Control, Content-Encoding, Content-Language, Content-Length, Content-Type, ETag, Expires, GET, HEAD, If, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Keep-Alive, Last-Modified, Location, OPTION, OPTIONS, Origin, POST, PUT, Pragma, Referer, Refresh, URI, Upgrade, User-Agent, X-Authorization, X-Requested-With"
          </IfModule>
      when: wphtaccess.stat.exists == True

    - name: Check WP config
      stat:
        path: '{{ wp_dir }}/wp-config.php'
      register: wpconfig

#    - name: Gen WP salts
#      get_url: https://api.wordpress.org/secret-key/1.1/salt/

    - name: Install WP config
      become: yes
      template:
        src: src/templates/wp-config.j2
        dest: '{{ wp_dir }}/wp-config.php'
        owner: www-data
        group: www-data
        mode: 0660
      when: wpconfig.stat.exists is undefined or wpconfig.stat.exists == False

    # The regex strips the number suffix so plugins will not be replaced
    # if they are already present making the play faster. HOWEVER gitium
    # will be installed every time because it has no numeric suffix
    - name: Install WP plugins
      become: yes
      become_user: www-data
      unarchive:
        src: 'https://downloads.wordpress.org/plugin/{{ item }}'
        dest: '{{ wp_dir }}/wp-content/plugins/'
        creates: '{{ wp_dir }}/wp-content/plugins/{{ item | regex_replace("([.]\d+)+.zip$","") }}'
        remote_src: True
        owner: www-data
        group: www-data
      with_items: "{{ wp_plugins }}"

    - name: Install optional WP plugins
      become: yes
      become_user: www-data
      unarchive:
        src: 'https://downloads.wordpress.org/plugin/{{ item }}'
        dest: '{{ wp_dir }}/wp-content/plugins/'
        creates: '{{ wp_dir }}/wp-content/plugins/{{ item | regex_replace("([.]\d+)+.zip$","") }}'
        remote_src: True
        owner: www-data
        group: www-data
      with_items: "{{ wp_optional_plugins }}"
      when: wp_optional_plugins is defined

    - name: Install Omny Link forms plugin
      become: yes
      become_user: www-data
      unarchive:
        src: src/rest-forms.zip
        dest: '{{ wp_dir }}/wp-content/plugins/'
        owner: www-data
        group: www-data
      when: wp.stat.isdir is undefined

    - name: Install Bootstrap starter theme
      become: yes
      become_user: www-data
      unarchive:
        src: src/bst.zip
        dest: '{{ wp_dir }}/wp-content/themes/'
        owner: www-data
        group: www-data
      when: wp.stat.isdir is undefined

    - name: Rename theme to tenant name
      command: creates="{{ wp_dir }}/wp-content/themes/{{ tenant_id }}" mv {{ wp_dir }}/wp-content/themes/bst {{ wp_dir }}/wp-content/themes/{{ tenant_id }}
      when: wp.stat.isdir is undefined

    - name: Check Omny config
      stat:
        path: '{{ wp_dir }}/wp-content/themes/{{ tenant_id }}/tenant-config.json'
      when: omny_tenant is defined and omny_tenant == True
      register: omnyconfig

    - name: Create basic Omny config
      become: yes
      template:
        src: src/templates/tenant-config.json.j2
        dest: '{{ wp_dir }}/wp-content/themes/{{ tenant_id }}/tenant-config.json'
        force: no
        owner: www-data
        group: www-data
        mode: 0664
      when: omny_tenant is defined and omny_tenant == True and (omnyconfig.stat.exists is undefined or omnyconfig.stat.exists == False)

    - name: Remove unrequired WP plugins & themes
      become: yes
      file: path='{{ wp_dir }}/wp-content/{{ item }}' state=absent
      with_items: "{{ wp_unreqd }}"

    - name: Init git repo
      become_user: www-data
      command: git init
      args:
        chdir: "{{ wp_dir }}"
      when: wp.stat.isdir is undefined

    - name: Check if origin is set
      command: git remote
      args:
        chdir: "{{ wp_dir }}"
      register: origin

    - name: Setup origin for git
      command: git remote add origin http://gitium:{{ gitium_pass }}@code.knowprocess.com/omny/{{ tenant_id }}
      args:
        chdir: "{{ wp_dir }}"
      when: origin.stdout != 'origin'

    - name: Add WP files to git
      command: git add {{ wp_dir }}
      args:
        chdir: "{{ wp_dir }}"
      when: origin.stdout != 'origin'

    - name: Change ownership of wp dir
      file:
        path: "{{ wp_dir }}"
        owner: www-data
        group: www-data
        recurse: yes
        mode: "u+rw,g+rw,o-w"

    # This often fails claiming that git --global config user.xxx is unset
    #- name: Initial commit
    #  become_user: www-data
    #  command: git commit -m "Initial commit"
    #  args:
    #    chdir: "{{ wp_dir }}"
    #  when: wp.stat.isdir is undefined and origin.stdout != 'origin'

